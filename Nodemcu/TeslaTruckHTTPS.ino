#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServerSecure.h>
#include <ESP8266mDNS.h>
#include "pitches.h"
#include <Servo.h>

#ifndef STASSID
#define STASSID "xx"
#define STAPSK  "xx"
#endif

//****************************pins**************************
#define motorLeftForward 16   //D0
#define motorLeftBackward 5   //D1
#define motorRightForward 4   //D2
#define motoRightBackward 0   //D3
#define hornPin 14            //D5
#define rightIndicatorPin 12  //D6
#define leftIndicatorPin 13   //D7
#define lightPin 15           //D8

const char html_index[] = {"<!DOCTYPE html>\n<html>\n<link rel=\"stylesheet\" href=\"https://cdn.materialdesignicons.com/2.5.94/css/materialdesignicons.min.css\">\n<script src=\"https://kit.fontawesome.com/fef9c30a7a.js\" crossorigin=\"anonymous\"></script>\n<meta name=\"mobile-web-app-capable\" content=\"yes\">\n<meta name=\"viewport\" content=\"width=device-width, user-scalable=no\">\n<head>\n\t<link rel=\"manifest\" href=\"/manifest.json\">\n\t<link rel=\"stylesheet\" href=\"styles.css\" type=\"text.css\">\n\t<meta name=\"theme-color\" content=\"#4285f4\" />\n\t<script src=\"https://code.jquery.com/jquery-3.1.0.min.js\"> </script>\n\t<title>Tesla Truck Control</title>\n</head>\n\t<body>\n\t\t<form method=\"get\">\n\t\t\t<div class=\"grid-container\">\n\t\t\t\t<div class=\"Left-Indicator\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"left-indicator-button\" onclick= window.location.href='/leftindicator'>\n\t\t\t\t\t\t\t<i class=\"far fa-caret-square-left\" id=\"left-indicator-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Lights\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"lights-button\" onclick= window.location.href='/lights'>\n\t\t\t\t\t\t<i class=\"fas fa-lightbulb\" id=\"lights-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Emergency\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"emergency-buttom\" onclick= window.location.href='/emergency'>\n\t\t\t\t\t\t<i class=\"mdi mdi-triangle-outline\" id=\"emergency-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Right-Indicator\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"right-indicator-button\" onclick= window.location.href='/rightindicator'>\n\t\t\t\t\t\t<i class=\"far fa-caret-square-right\" id=\"right-indicator-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Go\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"go-button\"onclick= window.location.href='/go'>\n\t\t\t\t\t\t<i class=\"fas fa-arrow-alt-circle-up\" id=\"go-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Horn\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"horn-button\" onclick= window.location.href='/horn'>\n\t\t\t\t\t\t<i class=\"fas fa-bullhorn\" id=\"horn-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Left\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"left-button\" onclick= window.location.href='/left'> \n\t\t\t\t\t\t<i class=\"fas fa-long-arrow-alt-left\" id=\"left-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Right\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"right-button\" onclick= window.location.href='/right'>\n\t\t\t\t\t\t<i class=\"fas fa-long-arrow-alt-right\" id=\"right-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"Stop\">\n\t\t\t\t\t<button type=\"button\" class=\"button\" id=\"stop-button\" onclick= window.location.href='/stop'>\n\t\t\t\t\t\t<i class=\"fas fa-minus-circle\" id=\"stop-icon\"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t\t<script>\n\t\tif ('serviceWorker' in navigator) {\n\t\t  window.addEventListener('load', function() {\n\t\t    navigator.serviceWorker.register('service-worker.js')\n\t\t      .then(reg => {\n\t\t        console.log('Service worker registered!', reg);\n\t\t      })\n\t\t      .catch(err => {\n\t\t        console.log('Service worker registration failed: BULLSHIT', err);\n\t\t      });\n\t\t  });\n\t\t}\n\t\t</script>\n\t</body>\n</html>"};
const char offline_html[] = {"<!DOCTYPE html>\n<html>\n<head>\n\t<title>404</title>\n</head>\n<body>\n\t<h1>Not Found fucker</h1>\n</body>\n</html>"};
const char styles_css[] PROGMEM = {"html, body \n{\n\tmargin:0%;\n\theight: 100%;\n\toverflow: hidden;\n\tbackground-color: #000000;\n}\n\n.grid-container\n{\n\tbackground-color: #000000;\n}\n\n.button:active\n{\n\tbackground-color: #241e1e;\n}\n\n.button\n{\n\tbackground-color: #3e3636;\n\tborder-color: #000000;\n\toutline: 0;\n}\n\n#emergency-icon\n{\n\tfont-weight: bold;\n\tcolor: #b3000c;\n}\n\n#lights-icon\n{\n\tcolor: #aeb025;\n}\n\n#left-indicator-icon,#right-indicator-icon\n{\n\tcolor: #b07425;\n}\n\n#go-icon\n{\n\tcolor: #00b32c;\n}\n\n#horn-icon\n{\n\tcolor: #d8d8d8;\n}\n\n#stop-icon\n{\n\tcolor: #b3000c;\n}\n\n#left-icon,#right-icon\n{\n\tcolor: #d8d8d8;\n}\n\n@media only screen and (max-width: 361px)\n{\n\tbody\n\t{\n\t\tpadding-top: 5rem;\n\t}\n\t.grid-container \n\t{\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n\t\tgrid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n\t\tgrid-column-gap: 1%;\n\t\tgrid-row-gap: 1%;\n\t\theight: 100%;\n\t\tpadding: 0;\n\t\tmargin-bottom: 1%;\n\t}\n\n\t.button \n\t{\n\twidth: 100%;\n\theight: 100%;\n\tborder-radius: 4rem;\n\t}\n\n\t.Left-Indicator \n\t{\n\t\tgrid-column: 1/3;\n\t\tgrid-row: 1/3;\n\t}\n\n\t.Lights \n\t{\n\t\tgrid-column: 3/5;\n\t\tgrid-row: 1;\n\t}\n\n\t.Emergency \n\t{\n\t\tgrid-column: 3/5;\n\t\tgrid-row: 2;\n\t}\n\n\t.Right-Indicator \n\t{\n\t\tgrid-column: 5/7;\n\t\tgrid-row: 1/3;\n\t}\n\n\t.Go \n\t{\n\t\tgrid-column: 4/7;\n\t\tgrid-row: 7/10;\n\t}\n\n\t.Horn\n\t{\n\t\tgrid-column:1/7;\n\t\tgrid-row: 3;\n\t}\n\n\t.Left \n\t{\n\t\tgrid-column: 1/4;\n\t\tgrid-row: 4/7;\n\t}\n\n\t.Right \n\t{\n\t\tgrid-column: 4/7;\n\t\tgrid-row: 4/7;\n\t}\n\n\t.Stop \n\t{\n\t\tgrid-column: 1/4;\n\t\tgrid-row: 7/10;\n\t}\n\n\t#emergency-icon\n\t{\n\t\tfont-size: 2rem;\t\t\t\t\n\t}\n\n\t#lights-icon\n\t{\n\t\tfont-size: 2rem;\n\t}\n\n\t#left-indicator-icon,#right-indicator-icon{\n\t\tfont-size: 4rem;\n\t}\n\n\t#go-icon{\n\t\tfont-size: 8rem;\n\t}\n\n\t#horn-icon{\n\t\tfont-size: 2rem;\n\t}\n\n\t#stop-icon{\n\t\tfont-size: 8rem;\t\t\t\t\n\t}\n\n\t#left-icon,#right-icon{\n\t\tfont-size: 8rem;\t\t\t\t\n\t}\n}\n\n@media only screen and (min-width: 362px)\n{\n\tbody\n\t{\n\t\tpadding-top: 1rem;\n\t}\n\t.grid-container \n\t{\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;\n\t\tgrid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr;\n\t\tgrid-column-gap: 1%;\n\t\tgrid-row-gap: 1%;\n\t\theight: 100%;\n\t\tpadding: 0;\n\t\tmargin-bottom: 1%;\n\t\tbackground-color: #000000;\n\t}\n\t.Left-Indicator {\n\t\tgrid-column: 1/3;\n\t\tgrid-row: 1/3;\n\t}\n\n\t.Lights {\n\t\tgrid-column: 3/5;\n\t\tgrid-row: 1;\n\t}\n\n\t.Emergency {\n\t\tgrid-column: 3/5;\n\t\tgrid-row: 2;\n\t}\n\n\t.Right-Indicator {\n\t\tgrid-column: 5/7;\n\t\tgrid-row: 1/3;\n\t}\n\n\t.Go {\n\t\tgrid-column: 7/10;\n\t\tgrid-row: 1/4;\n\t}\n\n\t.Horn{\n\t\tgrid-column:1/7;\n\t\tgrid-row: 3;\n\t}\n\n\t.Left {\n\t\tgrid-column: 1/4;\n\t\tgrid-row: 4/7;\n\t}\n\n\t.Right {\n\t\tgrid-column: 4/7;\n\t\tgrid-row: 4/7;\n\t}\n\n\t.Stop {\n\t\tgrid-column: 7/10;\n\t\tgrid-row: 4/7;\n\t}\n\n\t#emergency-icon{\n\t\tfont-size: 1rem;\n\t}\n\n\t#lights-icon{\n\t\tfont-size: rem;\n\t}\n\n\t#left-indicator-icon,#right-indicator-icon{\n\t\tfont-size: 4rem;\n\t}\n\n\t#go-icon{\n\t\tfont-size: 9rem;\n\t}\n\n\t#horn-icon{\n\t\tfont-size: 1rem;\n\t}\n\n\t#stop-icon{\n\t\tfont-size: 9rem;\n\t}\n\n\t#left-icon,#right-icon{\n\t\tfont-size: 9rem;\n\t}\n\n\t.button \n\t{\n\twidth: 100%;\n\theight: 100%;\n\tborder-radius: 5rem;\n\t}\n\n}"};
const char manifest_js[] = {"{\n  \"short_name\": \"CyberTruck\",\n  \"name\": \"Tesla Cyber Truck\",\n  \"icons\": [\n    {\n      \"src\": \"/images/tesla_192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"/images/tesla_512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \"/\",\n  \"display\": \"fullscreen\",\n  \"background_color\": \"#3367D6\"\n}"};
const char serviceWorker_js[] PROGMEM = {"const cacheName = 'cache-v1';\nconst precacheResources = [\n  '/',\n  'index.html',\n  'offine/offline.html'\n];\n\nself.addEventListener('install', event => {\n  console.log('Service worker install event!');\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(cache => {\n        return cache.addAll(precacheResources);\n      })\n  );\n});\n\nself.addEventListener('activate', event => {\n  console.log('Service worker activate event!');\n});\n\nself.addEventListener('fetch', event => {\n  console.log('Fetch intercepted for:', event.request.url);\n  event.respondWith(caches.match(event.request)\n    .then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n        return fetch(event.request);\n      })\n    );\n});"};
const char tesla_192_png[] PROGMEM= {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x04, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xF2, 0x71, 0x34, 0x00, 0x00, 0x00, 0x24, 0x50, 0x4C, 0x54, 0x45, 0x47, 0x70, 0x4C, 0xE9, 0x18, 0x34, 0xEA, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0x59, 0x10, 0xBD, 0x7A, 0x00, 0x00, 0x00, 0x0B, 0x74, 0x52, 0x4E, 0x53, 0x00, 0x11, 0x26, 0x3E, 0x5B, 0x78, 0x93, 0xAC, 0xC4, 0xDD, 0xF0, 0x70, 0xED, 0x48, 0x01, 0x00, 0x00, 0x06, 0x0F, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0xB4, 0xD6, 0x35, 0x78, 0xE4, 0x46, 0x14, 0x00, 0xE0, 0x27, 0x19, 0xEA, 0xD1, 0x1A, 0xCB, 0xC5, 0x40, 0x65, 0xB6, 0xBF, 0xA4, 0x39, 0x58, 0x08, 0xB3, 0xB9, 0x09, 0x9A, 0xBE, 0x34, 0x87, 0xC6, 0xE6, 0xD8, 0x54, 0x85, 0x17, 0xBE, 0x54, 0xA1, 0xDD, 0x55, 0x98, 0x57, 0xAF, 0x6F, 0x52, 0x5D, 0x1D, 0xD8, 0x5C, 0x5F, 0x78, 0xAF, 0x0F, 0xAE, 0xEE, 0xC6, 0xD2, 0xCE, 0x3C, 0xCD, 0x4A, 0xA6, 0xFF, 0x73, 0xB5, 0x92, 0x66, 0xAC, 0x79, 0x24, 0x38, 0x69, 0x1A, 0x04, 0x10, 0x32, 0xEE, 0x63, 0x06, 0x18, 0x50, 0x83, 0xDA, 0x7F, 0x77, 0xF7, 0x6A, 0xB6, 0x3F, 0xE1, 0xE8, 0xB4, 0xE8, 0xF0, 0xE4, 0xC2, 0x56, 0xAE, 0x8C, 0x44, 0x39, 0xB7, 0xB5, 0x3C, 0x97, 0x8C, 0x32, 0x38, 0x02, 0x23, 0x3E, 0xB9, 0x9A, 0x33, 0xB1, 0x99, 0xEC, 0xE6, 0x5C, 0xD2, 0x80, 0x43, 0x09, 0x0D, 0x4F, 0x6E, 0x97, 0x31, 0x80, 0x72, 0x76, 0x2E, 0x19, 0x81, 0x03, 0xD2, 0x62, 0x99, 0x6D, 0x13, 0x03, 0xAB, 0x64, 0xE7, 0x06, 0x19, 0x04, 0x17, 0x1A, 0x59, 0xCC, 0xE3, 0x01, 0x55, 0x6E, 0xBD, 0x14, 0xF4, 0x35, 0x3A, 0xD2, 0x6B, 0x26, 0x1E, 0x82, 0x95, 0x7D, 0x63, 0x00, 0xFC, 0x85, 0x32, 0xDB, 0x78, 0x68, 0x74, 0x0B, 0xBA, 0xFC, 0x0E, 0x1E, 0x49, 0xF1, 0x8D, 0x08, 0xA8, 0xE9, 0x69, 0x1A, 0xD9, 0x43, 0xBC, 0x45, 0x18, 0xBC, 0x69, 0xF1, 0xC3, 0x9C, 0x3D, 0x65, 0x7D, 0xF0, 0x22, 0xF3, 0x8C, 0xED, 0x54, 0x93, 0xE5, 0xCB, 0xF5, 0xBA, 0xDD, 0x5C, 0x59, 0x9E, 0xBF, 0x67, 0x61, 0x65, 0xB5, 0x5E, 0xDB, 0xE5, 0x26, 0x5B, 0xDC, 0xA4, 0xA1, 0xD0, 0x47, 0x77, 0x94, 0x75, 0xB4, 0x39, 0x37, 0x9E, 0x8C, 0x46, 0x0D, 0xC3, 0xE0, 0x8D, 0x8B, 0x19, 0x46, 0x28, 0x14, 0x1D, 0x4E, 0xCF, 0xAF, 0x2A, 0x4F, 0xB4, 0xF8, 0x3A, 0x03, 0x41, 0x7C, 0xD1, 0xF4, 0x5C, 0x3C, 0xB7, 0x3C, 0x3E, 0x14, 0x61, 0xA0, 0xA0, 0x85, 0x86, 0xD2, 0x0B, 0xDE, 0xBD, 0xC4, 0xBA, 0x75, 0x16, 0x5C, 0x9A, 0xE7, 0xBF, 0x6F, 0x65, 0x2F, 0x27, 0xC9, 0xE2, 0x84, 0x66, 0xB7, 0x14, 0xD3, 0x33, 0x9F, 0x98, 0x73, 0xFA, 0xD3, 0x26, 0x12, 0xA5, 0x65, 0xF5, 0xEA, 0x74, 0x8F, 0x85, 0xBC, 0x3A, 0x12, 0x5A, 0x62, 0xC7, 0xAB, 0x28, 0x07, 0xE1, 0x40, 0x3C, 0x7B, 0x57, 0xD1, 0x4E, 0x27, 0x2D, 0x53, 0xA0, 0x79, 0x36, 0x1E, 0x01, 0x7F, 0xA4, 0x81, 0xD1, 0x2C, 0xAF, 0x5C, 0x62, 0x30, 0x6D, 0x92, 0xE5, 0xC5, 0xAE, 0xA5, 0x45, 0x87, 0x86, 0x53, 0xFD, 0x40, 0xE8, 0xE3, 0x49, 0x29, 0xFE, 0x3A, 0xDD, 0xC2, 0xBA, 0x09, 0x1B, 0x72, 0x21, 0xBE, 0x14, 0x06, 0x87, 0x51, 0x9F, 0x67, 0xAB, 0xDB, 0x79, 0xC4, 0x6B, 0x40, 0x3C, 0x84, 0x58, 0xB2, 0xC7, 0x4D, 0xD4, 0x68, 0xB6, 0xC5, 0x4F, 0xF0, 0xA4, 0xB2, 0x95, 0x68, 0xB1, 0xF4, 0x6A, 0xDE, 0xE4, 0xF7, 0x91, 0x78, 0xEB, 0xFC, 0x3F, 0xB3, 0x4A, 0x9B, 0xE3, 0x83, 0x4C, 0xD9, 0xCC, 0x3E, 0x86, 0x1E, 0x21, 0x79, 0xDD, 0xD0, 0xDA, 0xAB, 0xA3, 0xEB, 0x55, 0x90, 0x74, 0xA3, 0x4B, 0xD8, 0x23, 0x26, 0x94, 0xD4, 0x55, 0x68, 0x45, 0x47, 0xF1, 0x25, 0xE6, 0xB4, 0xA5, 0x05, 0x29, 0xB5, 0x3E, 0x01, 0xC9, 0xAC, 0x94, 0x30, 0x97, 0xCF, 0x3A, 0x0F, 0x8F, 0x34, 0x3C, 0x7B, 0x1A, 0xB4, 0x5D, 0xD2, 0x40, 0xB4, 0xE1, 0x45, 0xD2, 0x68, 0xAC, 0xD3, 0x20, 0x68, 0x35, 0x49, 0xD5, 0xDF, 0x4A, 0x32, 0x52, 0x58, 0x3F, 0x33, 0x80, 0xA7, 0x9C, 0xEE, 0xE1, 0x2C, 0x6F, 0x22, 0xF5, 0x0E, 0x08, 0x1E, 0x41, 0xCA, 0xDA, 0x4C, 0x32, 0xA9, 0x35, 0x7C, 0x0F, 0x00, 0xBD, 0x68, 0xFB, 0xE0, 0x0C, 0xBF, 0xA4, 0xE8, 0x4A, 0xF8, 0x73, 0x58, 0x08, 0xF1, 0x2E, 0x2A, 0x3A, 0x10, 0xDF, 0xA2, 0x73, 0xE9, 0x7E, 0x08, 0xF8, 0xCB, 0x5A, 0x37, 0x23, 0xFB, 0x3D, 0x5B, 0x39, 0xED, 0xCF, 0x43, 0x83, 0x1E, 0x54, 0x28, 0x5D, 0xE6, 0x07, 0x1D, 0x9A, 0x36, 0xF9, 0xC1, 0xD6, 0x83, 0x50, 0xE1, 0xC7, 0xA3, 0x8D, 0x6C, 0xA3, 0xD2, 0xA7, 0x0C, 0x1C, 0xDA, 0x9B, 0xA8, 0x94, 0x7D, 0x89, 0xF1, 0x63, 0x2A, 0xD8, 0x21, 0xA8, 0x7B, 0xB2, 0xF8, 0x22, 0x6D, 0x7A, 0x94, 0xF5, 0x3C, 0x38, 0xDA, 0x4C, 0x0C, 0x30, 0x6E, 0x12, 0x3B, 0x1F, 0x83, 0xAD, 0x8B, 0x1F, 0xFF, 0xC8, 0x3A, 0x12, 0x8A, 0x30, 0x3F, 0x81, 0x4D, 0xED, 0xFF, 0xC7, 0x9D, 0x2F, 0x80, 0x4B, 0x7F, 0xAC, 0x80, 0xCD, 0x55, 0xFA, 0x9D, 0x7B, 0x7D, 0x6F, 0xBD, 0x14, 0x26, 0x13, 0x79, 0x11, 0x7D, 0x5D, 0x70, 0xDB, 0x90, 0xAF, 0x5B, 0xD2, 0x54, 0xEE, 0xA4, 0xC7, 0x43, 0xFD, 0xC8, 0x48, 0x88, 0xD5, 0x3E, 0x3B, 0x03, 0x0D, 0xE8, 0xCC, 0xF1, 0xC4, 0xC3, 0xDC, 0x86, 0x84, 0x3A, 0x10, 0x3A, 0xD4, 0x3D, 0xB0, 0x3C, 0x00, 0x41, 0x8C, 0xC3, 0x3D, 0x69, 0x08, 0xA2, 0x63, 0xE1, 0x35, 0x5A, 0xF7, 0x81, 0xC2, 0xDC, 0x52, 0xC0, 0x60, 0xDE, 0xF1, 0x4B, 0x6B, 0xEA, 0x9A, 0x7F, 0x88, 0x69, 0x7F, 0x0C, 0x18, 0x35, 0x67, 0xEE, 0x68, 0x1B, 0xA8, 0x46, 0x72, 0x82, 0x7B, 0x10, 0x03, 0x7A, 0xD5, 0x99, 0x34, 0xFE, 0xCE, 0xBB, 0x41, 0x86, 0xDF, 0x6E, 0x83, 0x97, 0xFF, 0x6A, 0x7B, 0xD5, 0x6A, 0xF5, 0x0E, 0xB8, 0x52, 0xF6, 0x9F, 0xEB, 0xDF, 0x6A, 0x75, 0xAF, 0x56, 0xBB, 0x0B, 0x5E, 0xFE, 0xF9, 0x4A, 0x9A, 0xE0, 0xE4, 0x93, 0x74, 0x79, 0x22, 0x95, 0x1C, 0x1A, 0x1A, 0x8C, 0x36, 0xA6, 0x40, 0xE5, 0xB4, 0x30, 0x69, 0xAE, 0x47, 0x87, 0x86, 0xEA, 0xDF, 0x1C, 0x13, 0x0B, 0xDB, 0xA6, 0x77, 0xBC, 0x1C, 0x2D, 0xBB, 0xF2, 0x04, 0x1C, 0x74, 0x3E, 0x49, 0x7A, 0x85, 0xCC, 0x10, 0x32, 0xEE, 0x15, 0xE7, 0xDB, 0x2E, 0x3E, 0xB5, 0xA3, 0x98, 0x1F, 0x24, 0x0A, 0xE4, 0xF3, 0xBB, 0x5D, 0x78, 0x6E, 0x97, 0x54, 0x1E, 0x17, 0x13, 0x7B, 0xF1, 0x05, 0xFA, 0x15, 0xE2, 0xBA, 0xC1, 0x80, 0x6B, 0x5E, 0xB8, 0x56, 0xBF, 0xB0, 0xC4, 0xE3, 0x8D, 0x29, 0x44, 0xBA, 0x5D, 0x97, 0xBB, 0xFF, 0x7B, 0x8C, 0xCE, 0x77, 0x4F, 0x15, 0x71, 0x15, 0x6D, 0xD6, 0xDD, 0xFA, 0x05, 0x20, 0x9E, 0x20, 0x6D, 0xD9, 0xB7, 0x39, 0xFF, 0xCC, 0x40, 0xD0, 0xEA, 0xDC, 0xF9, 0x2E, 0x50, 0xFA, 0x06, 0xB9, 0x48, 0x06, 0xBC, 0xE4, 0x27, 0x90, 0x3C, 0xB9, 0x7F, 0xA1, 0x1F, 0x3C, 0x74, 0x15, 0xE4, 0xC8, 0x71, 0x1B, 0xCA, 0x5A, 0x05, 0x1B, 0x0D, 0x57, 0xE5, 0x05, 0xF0, 0x34, 0x66, 0xD2, 0xF7, 0xB6, 0x29, 0x1B, 0xC9, 0xF7, 0x20, 0xE2, 0x5F, 0x71, 0xD6, 0x45, 0x70, 0xE9, 0xE0, 0xFA, 0xE5, 0x43, 0xA8, 0xFB, 0x9B, 0x14, 0xE6, 0x1D, 0x50, 0xA8, 0x91, 0xD2, 0xBF, 0xCD, 0xD7, 0x51, 0xD0, 0x67, 0x10, 0xF1, 0x6D, 0x90, 0x3D, 0x8A, 0x0A, 0xF4, 0xD6, 0x87, 0xED, 0x24, 0x0C, 0x83, 0x52, 0xCB, 0x92, 0xDD, 0xA3, 0xE8, 0x53, 0x0A, 0x57, 0x41, 0xD6, 0x83, 0xF8, 0x3E, 0x59, 0x5F, 0xDA, 0xE1, 0x15, 0x90, 0xF5, 0xA2, 0x02, 0xBD, 0xB5, 0x1D, 0xDF, 0xEF, 0x87, 0xA6, 0x5A, 0xA6, 0x4F, 0xD3, 0xA7, 0xD4, 0x33, 0x5A, 0xD6, 0x7A, 0x33, 0x0C, 0x3E, 0x74, 0x06, 0x34, 0xF9, 0xD4, 0x23, 0x8B, 0x3E, 0x7D, 0x08, 0xB4, 0x57, 0x90, 0x92, 0x57, 0xD3, 0xC1, 0xDF, 0xFF, 0xDC, 0xDA, 0x81, 0x69, 0x24, 0x31, 0x0C, 0x85, 0x61, 0xF5, 0x79, 0x25, 0x6C, 0x09, 0x57, 0xD7, 0xC0, 0x75, 0x63, 0x55, 0x30, 0x52, 0x05, 0xD6, 0x41, 0xC0, 0xC0, 0xC2, 0x63, 0x01, 0x78, 0x7F, 0x60, 0xD6, 0x40, 0x42, 0x06, 0xC8, 0xC7, 0xB3, 0x2C, 0x25, 0x78, 0x76, 0x47, 0xE8, 0x95, 0x26, 0x60, 0xFA, 0x13, 0x6C, 0x00, 0x22, 0x3F, 0xC2, 0x86, 0xF5, 0xFA, 0x3C, 0x29, 0xB0, 0x04, 0x65, 0x03, 0x8A, 0x07, 0xBE, 0x14, 0x48, 0x1B, 0xB0, 0xF5, 0xE3, 0xB6, 0x01, 0xA3, 0x9F, 0x1A, 0x81, 0x66, 0xFB, 0x4C, 0xFF, 0xE3, 0x72, 0xEE, 0x90, 0x2C, 0x09, 0x12, 0x4E, 0xA0, 0x67, 0xC5, 0x15, 0xB6, 0x04, 0xFA, 0xBC, 0x94, 0x11, 0x58, 0xEA, 0xE1, 0x6D, 0x04, 0x4A, 0xD6, 0x80, 0x06, 0x16, 0x0D, 0xB4, 0x0F, 0xD0, 0xB3, 0x22, 0x8D, 0xC0, 0xE8, 0x36, 0x30, 0x02, 0xFD, 0xAD, 0x00, 0x3A, 0x2B, 0xAE, 0xB0, 0x25, 0xD0, 0x47, 0xB2, 0x7C, 0x80, 0xFE, 0x6D, 0xDB, 0x0A, 0xA4, 0x0E, 0x65, 0x02, 0xF4, 0x60, 0x5B, 0x56, 0x60, 0xF0, 0x1A, 0xC0, 0x5B, 0x24, 0x2A, 0x3A, 0x69, 0x05, 0xA6, 0xF5, 0x93, 0xA7, 0x03, 0xE8, 0xAC, 0xB8, 0xC2, 0x99, 0x40, 0x9C, 0x99, 0xA1, 0x81, 0x32, 0x03, 0x05, 0x02, 0x7A, 0x56, 0x2C, 0x33, 0xB0, 0xE8, 0x04, 0xA3, 0x8B, 0xC2, 0x01, 0xE3, 0x06, 0x76, 0xC7, 0xFB, 0x4A, 0x77, 0x82, 0xD6, 0x20, 0x06, 0x4C, 0x98, 0x81, 0x48, 0x0D, 0xFA, 0xD6, 0x1F, 0x7D, 0x11, 0xE2, 0x4B, 0x50, 0xFA, 0xC7, 0x07, 0x01, 0xF9, 0xF8, 0x04, 0x5B, 0x07, 0xF2, 0x01, 0xA3, 0x47, 0x11, 0x95, 0x60, 0xFC, 0xC0, 0xE4, 0x1B, 0x07, 0x00, 0x4D, 0x27, 0xA0, 0x81, 0x78, 0x07, 0xC2, 0x0F, 0x2C, 0xFD, 0x27, 0xFA, 0x41, 0x09, 0x4A, 0xC7, 0x81, 0x80, 0x06, 0x80, 0x9B, 0x4E, 0x30, 0x58, 0x02, 0x71, 0xF4, 0x87, 0x00, 0x36, 0x09, 0x88, 0x04, 0xC0, 0xFA, 0x2B, 0x5E, 0xC3, 0x1A, 0x12, 0xC8, 0xC2, 0x0E, 0x02, 0x24, 0x0D, 0x94, 0xEE, 0x09, 0x04, 0x48, 0x1A, 0x28, 0x04, 0xB8, 0x69, 0x60, 0x74, 0x1B, 0x18, 0x81, 0x86, 0x6B, 0xB0, 0xF9, 0x04, 0x30, 0x10, 0x29, 0xFA, 0x8C, 0xB9, 0x10, 0xB9, 0x82, 0x4E, 0xE0, 0x04, 0x54, 0xA7, 0x2D, 0x18, 0xE0, 0x13, 0xDC, 0x34, 0x90, 0x56, 0x40, 0x74, 0x5A, 0x43, 0xC0, 0xD0, 0x09, 0xA6, 0xCF, 0x77, 0x18, 0xD8, 0x18, 0x90, 0x67, 0xAB, 0x9E, 0xBA, 0x45, 0xD1, 0xA7, 0x0D, 0x28, 0x60, 0xC1, 0x5B, 0x74, 0x3A, 0xAD, 0x9E, 0x0B, 0xCC, 0xD9, 0x29, 0x08, 0x38, 0xD5, 0x6D, 0x2E, 0x01, 0x0E, 0xF4, 0x69, 0x64, 0x14, 0x98, 0x0E, 0x6C, 0xFD, 0x7C, 0x18, 0xF3, 0x5F, 0x40, 0x09, 0xCE, 0x9C, 0xDE, 0x14, 0x70, 0xCA, 0x3B, 0x74, 0x82, 0x1B, 0x04, 0xEA, 0x7C, 0xA1, 0x80, 0x4D, 0x03, 0xF5, 0x2B, 0x40, 0xD2, 0x5B, 0xD4, 0x20, 0x30, 0x1D, 0x31, 0x38, 0x90, 0x34, 0x10, 0xE4, 0x7A, 0x89, 0x8B, 0x10, 0xF7, 0x8B, 0x96, 0xFF, 0xB5, 0xC1, 0xA1, 0x16, 0xC1, 0x00, 0x00, 0x46, 0xE1, 0x3B, 0xDB, 0x19, 0x71, 0x55, 0x13, 0x69, 0xCB, 0x92, 0x4C, 0xD1, 0x95, 0x3D, 0x82, 0x2E, 0x2D, 0x4B, 0x8E, 0x28, 0x5A, 0x93, 0xE7, 0xE0, 0x7F, 0x39, 0xCF, 0xB0, 0x70, 0xBF, 0x6F, 0xC4, 0x74, 0x48, 0x06, 0x4C, 0x9B, 0xE4, 0x8E, 0x69, 0x9D, 0xF4, 0x98, 0xE6, 0xC9, 0x19, 0x53, 0x9D, 0x74, 0x98, 0xAA, 0x64, 0x87, 0xA9, 0x7C, 0xFD, 0x5A, 0x4C, 0xB3, 0xC7, 0x77, 0x85, 0xA9, 0xB8, 0x7E, 0x1A, 0x54, 0x97, 0x37, 0xAE, 0xD3, 0x88, 0x6B, 0x3F, 0xE0, 0xDA, 0x3E, 0x71, 0x2D, 0x6F, 0xB8, 0x16, 0x3D, 0xAE, 0xBA, 0xC3, 0x55, 0x1D, 0x71, 0x95, 0x2D, 0xAE, 0xA2, 0x61, 0x9A, 0x3F, 0xA9, 0xA1, 0x9A, 0x24, 0x7D, 0xC8, 0x6A, 0x35, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,};
const char tesla_512_png[] PROGMEM= {0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xC0, 0x04, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xF2, 0x71, 0x34, 0x00, 0x00, 0x00, 0x24, 0x50, 0x4C, 0x54, 0x45, 0x47, 0x70, 0x4C, 0xE9, 0x18, 0x34, 0xEA, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0xE9, 0x18, 0x34, 0x59, 0x10, 0xBD, 0x7A, 0x00, 0x00, 0x00, 0x0B, 0x74, 0x52, 0x4E, 0x53, 0x00, 0x11, 0x26, 0x3E, 0x5B, 0x78, 0x93, 0xAC, 0xC4, 0xDD, 0xF0, 0x70, 0xED, 0x48, 0x01, 0x00, 0x00, 0x06, 0x0F, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0xB4, 0xD6, 0x35, 0x78, 0xE4, 0x46, 0x14, 0x00, 0xE0, 0x27, 0x19, 0xEA, 0xD1, 0x1A, 0xCB, 0xC5, 0x40, 0x65, 0xB6, 0xBF, 0xA4, 0x39, 0x58, 0x08, 0xB3, 0xB9, 0x09, 0x9A, 0xBE, 0x34, 0x87, 0xC6, 0xE6, 0xD8, 0x54, 0x85, 0x17, 0xBE, 0x54, 0xA1, 0xDD, 0x55, 0x98, 0x57, 0xAF, 0x6F, 0x52, 0x5D, 0x1D, 0xD8, 0x5C, 0x5F, 0x78, 0xAF, 0x0F, 0xAE, 0xEE, 0xC6, 0xD2, 0xCE, 0x3C, 0xCD, 0x4A, 0xA6, 0xFF, 0x73, 0xB5, 0x92, 0x66, 0xAC, 0x79, 0x24, 0x38, 0x69, 0x1A, 0x04, 0x10, 0x32, 0xEE, 0x63, 0x06, 0x18, 0x50, 0x83, 0xDA, 0x7F, 0x77, 0xF7, 0x6A, 0xB6, 0x3F, 0xE1, 0xE8, 0xB4, 0xE8, 0xF0, 0xE4, 0xC2, 0x56, 0xAE, 0x8C, 0x44, 0x39, 0xB7, 0xB5, 0x3C, 0x97, 0x8C, 0x32, 0x38, 0x02, 0x23, 0x3E, 0xB9, 0x9A, 0x33, 0xB1, 0x99, 0xEC, 0xE6, 0x5C, 0xD2, 0x80, 0x43, 0x09, 0x0D, 0x4F, 0x6E, 0x97, 0x31, 0x80, 0x72, 0x76, 0x2E, 0x19, 0x81, 0x03, 0xD2, 0x62, 0x99, 0x6D, 0x13, 0x03, 0xAB, 0x64, 0xE7, 0x06, 0x19, 0x04, 0x17, 0x1A, 0x59, 0xCC, 0xE3, 0x01, 0x55, 0x6E, 0xBD, 0x14, 0xF4, 0x35, 0x3A, 0xD2, 0x6B, 0x26, 0x1E, 0x82, 0x95, 0x7D, 0x63, 0x00, 0xFC, 0x85, 0x32, 0xDB, 0x78, 0x68, 0x74, 0x0B, 0xBA, 0xFC, 0x0E, 0x1E, 0x49, 0xF1, 0x8D, 0x08, 0xA8, 0xE9, 0x69, 0x1A, 0xD9, 0x43, 0xBC, 0x45, 0x18, 0xBC, 0x69, 0xF1, 0xC3, 0x9C, 0x3D, 0x65, 0x7D, 0xF0, 0x22, 0xF3, 0x8C, 0xED, 0x54, 0x93, 0xE5, 0xCB, 0xF5, 0xBA, 0xDD, 0x5C, 0x59, 0x9E, 0xBF, 0x67, 0x61, 0x65, 0xB5, 0x5E, 0xDB, 0xE5, 0x26, 0x5B, 0xDC, 0xA4, 0xA1, 0xD0, 0x47, 0x77, 0x94, 0x75, 0xB4, 0x39, 0x37, 0x9E, 0x8C, 0x46, 0x0D, 0xC3, 0xE0, 0x8D, 0x8B, 0x19, 0x46, 0x28, 0x14, 0x1D, 0x4E, 0xCF, 0xAF, 0x2A, 0x4F, 0xB4, 0xF8, 0x3A, 0x03, 0x41, 0x7C, 0xD1, 0xF4, 0x5C, 0x3C, 0xB7, 0x3C, 0x3E, 0x14, 0x61, 0xA0, 0xA0, 0x85, 0x86, 0xD2, 0x0B, 0xDE, 0xBD, 0xC4, 0xBA, 0x75, 0x16, 0x5C, 0x9A, 0xE7, 0xBF, 0x6F, 0x65, 0x2F, 0x27, 0xC9, 0xE2, 0x84, 0x66, 0xB7, 0x14, 0xD3, 0x33, 0x9F, 0x98, 0x73, 0xFA, 0xD3, 0x26, 0x12, 0xA5, 0x65, 0xF5, 0xEA, 0x74, 0x8F, 0x85, 0xBC, 0x3A, 0x12, 0x5A, 0x62, 0xC7, 0xAB, 0x28, 0x07, 0xE1, 0x40, 0x3C, 0x7B, 0x57, 0xD1, 0x4E, 0x27, 0x2D, 0x53, 0xA0, 0x79, 0x36, 0x1E, 0x01, 0x7F, 0xA4, 0x81, 0xD1, 0x2C, 0xAF, 0x5C, 0x62, 0x30, 0x6D, 0x92, 0xE5, 0xC5, 0xAE, 0xA5, 0x45, 0x87, 0x86, 0x53, 0xFD, 0x40, 0xE8, 0xE3, 0x49, 0x29, 0xFE, 0x3A, 0xDD, 0xC2, 0xBA, 0x09, 0x1B, 0x72, 0x21, 0xBE, 0x14, 0x06, 0x87, 0x51, 0x9F, 0x67, 0xAB, 0xDB, 0x79, 0xC4, 0x6B, 0x40, 0x3C, 0x84, 0x58, 0xB2, 0xC7, 0x4D, 0xD4, 0x68, 0xB6, 0xC5, 0x4F, 0xF0, 0xA4, 0xB2, 0x95, 0x68, 0xB1, 0xF4, 0x6A, 0xDE, 0xE4, 0xF7, 0x91, 0x78, 0xEB, 0xFC, 0x3F, 0xB3, 0x4A, 0x9B, 0xE3, 0x83, 0x4C, 0xD9, 0xCC, 0x3E, 0x86, 0x1E, 0x21, 0x79, 0xDD, 0xD0, 0xDA, 0xAB, 0xA3, 0xEB, 0x55, 0x90, 0x74, 0xA3, 0x4B, 0xD8, 0x23, 0x26, 0x94, 0xD4, 0x55, 0x68, 0x45, 0x47, 0xF1, 0x25, 0xE6, 0xB4, 0xA5, 0x05, 0x29, 0xB5, 0x3E, 0x01, 0xC9, 0xAC, 0x94, 0x30, 0x97, 0xCF, 0x3A, 0x0F, 0x8F, 0x34, 0x3C, 0x7B, 0x1A, 0xB4, 0x5D, 0xD2, 0x40, 0xB4, 0xE1, 0x45, 0xD2, 0x68, 0xAC, 0xD3, 0x20, 0x68, 0x35, 0x49, 0xD5, 0xDF, 0x4A, 0x32, 0x52, 0x58, 0x3F, 0x33, 0x80, 0xA7, 0x9C, 0xEE, 0xE1, 0x2C, 0x6F, 0x22, 0xF5, 0x0E, 0x08, 0x1E, 0x41, 0xCA, 0xDA, 0x4C, 0x32, 0xA9, 0x35, 0x7C, 0x0F, 0x00, 0xBD, 0x68, 0xFB, 0xE0, 0x0C, 0xBF, 0xA4, 0xE8, 0x4A, 0xF8, 0x73, 0x58, 0x08, 0xF1, 0x2E, 0x2A, 0x3A, 0x10, 0xDF, 0xA2, 0x73, 0xE9, 0x7E, 0x08, 0xF8, 0xCB, 0x5A, 0x37, 0x23, 0xFB, 0x3D, 0x5B, 0x39, 0xED, 0xCF, 0x43, 0x83, 0x1E, 0x54, 0x28, 0x5D, 0xE6, 0x07, 0x1D, 0x9A, 0x36, 0xF9, 0xC1, 0xD6, 0x83, 0x50, 0xE1, 0xC7, 0xA3, 0x8D, 0x6C, 0xA3, 0xD2, 0xA7, 0x0C, 0x1C, 0xDA, 0x9B, 0xA8, 0x94, 0x7D, 0x89, 0xF1, 0x63, 0x2A, 0xD8, 0x21, 0xA8, 0x7B, 0xB2, 0xF8, 0x22, 0x6D, 0x7A, 0x94, 0xF5, 0x3C, 0x38, 0xDA, 0x4C, 0x0C, 0x30, 0x6E, 0x12, 0x3B, 0x1F, 0x83, 0xAD, 0x8B, 0x1F, 0xFF, 0xC8, 0x3A, 0x12, 0x8A, 0x30, 0x3F, 0x81, 0x4D, 0xED, 0xFF, 0xC7, 0x9D, 0x2F, 0x80, 0x4B, 0x7F, 0xAC, 0x80, 0xCD, 0x55, 0xFA, 0x9D, 0x7B, 0x7D, 0x6F, 0xBD, 0x14, 0x26, 0x13, 0x79, 0x11, 0x7D, 0x5D, 0x70, 0xDB, 0x90, 0xAF, 0x5B, 0xD2, 0x54, 0xEE, 0xA4, 0xC7, 0x43, 0xFD, 0xC8, 0x48, 0x88, 0xD5, 0x3E, 0x3B, 0x03, 0x0D, 0xE8, 0xCC, 0xF1, 0xC4, 0xC3, 0xDC, 0x86, 0x84, 0x3A, 0x10, 0x3A, 0xD4, 0x3D, 0xB0, 0x3C, 0x00, 0x41, 0x8C, 0xC3, 0x3D, 0x69, 0x08, 0xA2, 0x63, 0xE1, 0x35, 0x5A, 0xF7, 0x81, 0xC2, 0xDC, 0x52, 0xC0, 0x60, 0xDE, 0xF1, 0x4B, 0x6B, 0xEA, 0x9A, 0x7F, 0x88, 0x69, 0x7F, 0x0C, 0x18, 0x35, 0x67, 0xEE, 0x68, 0x1B, 0xA8, 0x46, 0x72, 0x82, 0x7B, 0x10, 0x03, 0x7A, 0xD5, 0x99, 0x34, 0xFE, 0xCE, 0xBB, 0x41, 0x86, 0xDF, 0x6E, 0x83, 0x97, 0xFF, 0x6A, 0x7B, 0xD5, 0x6A, 0xF5, 0x0E, 0xB8, 0x52, 0xF6, 0x9F, 0xEB, 0xDF, 0x6A, 0x75, 0xAF, 0x56, 0xBB, 0x0B, 0x5E, 0xFE, 0xF9, 0x4A, 0x9A, 0xE0, 0xE4, 0x93, 0x74, 0x79, 0x22, 0x95, 0x1C, 0x1A, 0x1A, 0x8C, 0x36, 0xA6, 0x40, 0xE5, 0xB4, 0x30, 0x69, 0xAE, 0x47, 0x87, 0x86, 0xEA, 0xDF, 0x1C, 0x13, 0x0B, 0xDB, 0xA6, 0x77, 0xBC, 0x1C, 0x2D, 0xBB, 0xF2, 0x04, 0x1C, 0x74, 0x3E, 0x49, 0x7A, 0x85, 0xCC, 0x10, 0x32, 0xEE, 0x15, 0xE7, 0xDB, 0x2E, 0x3E, 0xB5, 0xA3, 0x98, 0x1F, 0x24, 0x0A, 0xE4, 0xF3, 0xBB, 0x5D, 0x78, 0x6E, 0x97, 0x54, 0x1E, 0x17, 0x13, 0x7B, 0xF1, 0x05, 0xFA, 0x15, 0xE2, 0xBA, 0xC1, 0x80, 0x6B, 0x5E, 0xB8, 0x56, 0xBF, 0xB0, 0xC4, 0xE3, 0x8D, 0x29, 0x44, 0xBA, 0x5D, 0x97, 0xBB, 0xFF, 0x7B, 0x8C, 0xCE, 0x77, 0x4F, 0x15, 0x71, 0x15, 0x6D, 0xD6, 0xDD, 0xFA, 0x05, 0x20, 0x9E, 0x20, 0x6D, 0xD9, 0xB7, 0x39, 0xFF, 0xCC, 0x40, 0xD0, 0xEA, 0xDC, 0xF9, 0x2E, 0x50, 0xFA, 0x06, 0xB9, 0x48, 0x06, 0xBC, 0xE4, 0x27, 0x90, 0x3C, 0xB9, 0x7F, 0xA1, 0x1F, 0x3C, 0x74, 0x15, 0xE4, 0xC8, 0x71, 0x1B, 0xCA, 0x5A, 0x05, 0x1B, 0x0D, 0x57, 0xE5, 0x05, 0xF0, 0x34, 0x66, 0xD2, 0xF7, 0xB6, 0x29, 0x1B, 0xC9, 0xF7, 0x20, 0xE2, 0x5F, 0x71, 0xD6, 0x45, 0x70, 0xE9, 0xE0, 0xFA, 0xE5, 0x43, 0xA8, 0xFB, 0x9B, 0x14, 0xE6, 0x1D, 0x50, 0xA8, 0x91, 0xD2, 0xBF, 0xCD, 0xD7, 0x51, 0xD0, 0x67, 0x10, 0xF1, 0x6D, 0x90, 0x3D, 0x8A, 0x0A, 0xF4, 0xD6, 0x87, 0xED, 0x24, 0x0C, 0x83, 0x52, 0xCB, 0x92, 0xDD, 0xA3, 0xE8, 0x53, 0x0A, 0x57, 0x41, 0xD6, 0x83, 0xF8, 0x3E, 0x59, 0x5F, 0xDA, 0xE1, 0x15, 0x90, 0xF5, 0xA2, 0x02, 0xBD, 0xB5, 0x1D, 0xDF, 0xEF, 0x87, 0xA6, 0x5A, 0xA6, 0x4F, 0xD3, 0xA7, 0xD4, 0x33, 0x5A, 0xD6, 0x7A, 0x33, 0x0C, 0x3E, 0x74, 0x06, 0x34, 0xF9, 0xD4, 0x23, 0x8B, 0x3E, 0x7D, 0x08, 0xB4, 0x57, 0x90, 0x92, 0x57, 0xD3, 0xC1, 0xDF, 0xFF, 0xDC, 0xDA, 0x81, 0x69, 0x24, 0x31, 0x0C, 0x85, 0x61, 0xF5, 0x79, 0x25, 0x6C, 0x09, 0x57, 0xD7, 0xC0, 0x75, 0x63, 0x55, 0x30, 0x52, 0x05, 0xD6, 0x41, 0xC0, 0xC0, 0xC2, 0x63, 0x01, 0x78, 0x7F, 0x60, 0xD6, 0x40, 0x42, 0x06, 0xC8, 0xC7, 0xB3, 0x2C, 0x25, 0x78, 0x76, 0x47, 0xE8, 0x95, 0x26, 0x60, 0xFA, 0x13, 0x6C, 0x00, 0x22, 0x3F, 0xC2, 0x86, 0xF5, 0xFA, 0x3C, 0x29, 0xB0, 0x04, 0x65, 0x03, 0x8A, 0x07, 0xBE, 0x14, 0x48, 0x1B, 0xB0, 0xF5, 0xE3, 0xB6, 0x01, 0xA3, 0x9F, 0x1A, 0x81, 0x66, 0xFB, 0x4C, 0xFF, 0xE3, 0x72, 0xEE, 0x90, 0x2C, 0x09, 0x12, 0x4E, 0xA0, 0x67, 0xC5, 0x15, 0xB6, 0x04, 0xFA, 0xBC, 0x94, 0x11, 0x58, 0xEA, 0xE1, 0x6D, 0x04, 0x4A, 0xD6, 0x80, 0x06, 0x16, 0x0D, 0xB4, 0x0F, 0xD0, 0xB3, 0x22, 0x8D, 0xC0, 0xE8, 0x36, 0x30, 0x02, 0xFD, 0xAD, 0x00, 0x3A, 0x2B, 0xAE, 0xB0, 0x25, 0xD0, 0x47, 0xB2, 0x7C, 0x80, 0xFE, 0x6D, 0xDB, 0x0A, 0xA4, 0x0E, 0x65, 0x02, 0xF4, 0x60, 0x5B, 0x56, 0x60, 0xF0, 0x1A, 0xC0, 0x5B, 0x24, 0x2A, 0x3A, 0x69, 0x05, 0xA6, 0xF5, 0x93, 0xA7, 0x03, 0xE8, 0xAC, 0xB8, 0xC2, 0x99, 0x40, 0x9C, 0x99, 0xA1, 0x81, 0x32, 0x03, 0x05, 0x02, 0x7A, 0x56, 0x2C, 0x33, 0xB0, 0xE8, 0x04, 0xA3, 0x8B, 0xC2, 0x01, 0xE3, 0x06, 0x76, 0xC7, 0xFB, 0x4A, 0x77, 0x82, 0xD6, 0x20, 0x06, 0x4C, 0x98, 0x81, 0x48, 0x0D, 0xFA, 0xD6, 0x1F, 0x7D, 0x11, 0xE2, 0x4B, 0x50, 0xFA, 0xC7, 0x07, 0x01, 0xF9, 0xF8, 0x04, 0x5B, 0x07, 0xF2, 0x01, 0xA3, 0x47, 0x11, 0x95, 0x60, 0xFC, 0xC0, 0xE4, 0x1B, 0x07, 0x00, 0x4D, 0x27, 0xA0, 0x81, 0x78, 0x07, 0xC2, 0x0F, 0x2C, 0xFD, 0x27, 0xFA, 0x41, 0x09, 0x4A, 0xC7, 0x81, 0x80, 0x06, 0x80, 0x9B, 0x4E, 0x30, 0x58, 0x02, 0x71, 0xF4, 0x87, 0x00, 0x36, 0x09, 0x88, 0x04, 0xC0, 0xFA, 0x2B, 0x5E, 0xC3, 0x1A, 0x12, 0xC8, 0xC2, 0x0E, 0x02, 0x24, 0x0D, 0x94, 0xEE, 0x09, 0x04, 0x48, 0x1A, 0x28, 0x04, 0xB8, 0x69, 0x60, 0x74, 0x1B, 0x18, 0x81, 0x86, 0x6B, 0xB0, 0xF9, 0x04, 0x30, 0x10, 0x29, 0xFA, 0x8C, 0xB9, 0x10, 0xB9, 0x82, 0x4E, 0xE0, 0x04, 0x54, 0xA7, 0x2D, 0x18, 0xE0, 0x13, 0xDC, 0x34, 0x90, 0x56, 0x40, 0x74, 0x5A, 0x43, 0xC0, 0xD0, 0x09, 0xA6, 0xCF, 0x77, 0x18, 0xD8, 0x18, 0x90, 0x67, 0xAB, 0x9E, 0xBA, 0x45, 0xD1, 0xA7, 0x0D, 0x28, 0x60, 0xC1, 0x5B, 0x74, 0x3A, 0xAD, 0x9E, 0x0B, 0xCC, 0xD9, 0x29, 0x08, 0x38, 0xD5, 0x6D, 0x2E, 0x01, 0x0E, 0xF4, 0x69, 0x64, 0x14, 0x98, 0x0E, 0x6C, 0xFD, 0x7C, 0x18, 0xF3, 0x5F, 0x40, 0x09, 0xCE, 0x9C, 0xDE, 0x14, 0x70, 0xCA, 0x3B, 0x74, 0x82, 0x1B, 0x04, 0xEA, 0x7C, 0xA1, 0x80, 0x4D, 0x03, 0xF5, 0x2B, 0x40, 0xD2, 0x5B, 0xD4, 0x20, 0x30, 0x1D, 0x31, 0x38, 0x90, 0x34, 0x10, 0xE4, 0x7A, 0x89, 0x8B, 0x10, 0xF7, 0x8B, 0x96, 0xFF, 0xB5, 0xC1, 0xA1, 0x16, 0xC1, 0x00, 0x00, 0x46, 0xE1, 0x3B, 0xDB, 0x19, 0x71, 0x55, 0x13, 0x69, 0xCB, 0x92, 0x4C, 0xD1, 0x95, 0x3D, 0x82, 0x2E, 0x2D, 0x4B, 0x8E, 0x28, 0x5A, 0x93, 0xE7, 0xE0, 0x7F, 0x39, 0xCF, 0xB0, 0x70, 0xBF, 0x6F, 0xC4, 0x74, 0x48, 0x06, 0x4C, 0x9B, 0xE4, 0x8E, 0x69, 0x9D, 0xF4, 0x98, 0xE6, 0xC9, 0x19, 0x53, 0x9D, 0x74, 0x98, 0xAA, 0x64, 0x87, 0xA9, 0x7C, 0xFD, 0x5A, 0x4C, 0xB3, 0xC7, 0x77, 0x85, 0xA9, 0xB8, 0x7E, 0x1A, 0x54, 0x97, 0x37, 0xAE, 0xD3, 0x88, 0x6B, 0x3F, 0xE0, 0xDA, 0x3E, 0x71, 0x2D, 0x6F, 0xB8, 0x16, 0x3D, 0xAE, 0xBA, 0xC3, 0x55, 0x1D, 0x71, 0x95, 0x2D, 0xAE, 0xA2, 0x61, 0x9A, 0x3F, 0xA9, 0xA1, 0x9A, 0x24, 0x7D, 0xC8, 0x6A, 0x35, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82,};

const char* ssid = STASSID;
const char* password = STAPSK;

ESP8266WebServerSecure server(443);

// The certificate is stored in PMEM
static const uint8_t x509[] PROGMEM = 
{
  #include "x509.h"
};

// And so is the key.  These could also be in DRAM
static const uint8_t rsakey[] PROGMEM = 
{
  #include "key.h"
};

//control modes
int car_mode = 0; //this will control the movement of the car
int steering_mode = 0; //this will control the direction of the car
int light_mode = 0; //this will control the lighting of the car
int indicator_mode = 0; //this will control the indicators
int horn_mode = 0; //this will control the horn

//timer set up
unsigned long previousMillis = 0;
unsigned long previousMilliss = 0;
unsigned long startTime = 0;

//Lights
int lightState = LOW;
int leftIndicatorState = LOW;
int rightIndicatorState = LOW;
int bothIndicatorState = LOW;

//Horn Melody
int melody[] = {NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4};
int noteDurations[] = {4, 8, 8, 4, 4, 4, 4, 4};
unsigned long previousNoteMillis = 0;
int noteCounter = 0;
int numberOfNotes = sizeof(melody)/sizeof(int);
boolean outputTone = false;

void setup(void) 
{
  //setting up the horn
  pinMode(hornPin, OUTPUT);
  
//setting up light pins and turning off
  pinMode(leftIndicatorPin,OUTPUT);
  pinMode(rightIndicatorPin,OUTPUT);
  pinMode(lightPin,OUTPUT);
  digitalWrite(leftIndicatorPin,LOW);
  digitalWrite(rightIndicatorPin,LOW);
  digitalWrite(lightPin,LOW);

//setting up motor pins and turning off
  pinMode(motorLeftForward,OUTPUT);
  pinMode(motorLeftBackward,OUTPUT);
  pinMode(motorRightForward,OUTPUT);
  pinMode(motoRightBackward,OUTPUT);
  digitalWrite(motorLeftForward,LOW);
  digitalWrite(motorLeftBackward,LOW);
  digitalWrite(motorRightForward,LOW);
  digitalWrite(motoRightBackward,LOW);

  Serial.begin(115200);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS responder started");
  }

  
  server.setServerKeyAndCert_P(rsakey, sizeof(rsakey), x509, sizeof(x509));

  server.on("/", handleRoot);
  server.on("/index.html",handleIndex);
  server.on("/styles.css",handleCSS);
  server.on("/service-worker.js",handleServiceWorker);
  server.on("/offline/offline.html",handleOffline);
  server.on("/lights",HTTP_GET, handleLights);
  server.on("/go",HTTP_GET,handleGo);
  server.on("/stop",HTTP_GET,handleStop);
  server.on("/leftindicator",HTTP_GET,handleLeftIndicator);
  server.on("/rightindicator",HTTP_GET,handleRightIndicator);
  server.on("/emergency",HTTP_GET,handleEmergency);
  server.on("/horn",HTTP_GET,handleHorn);
  server.on("/left",HTTP_GET,handleLeft);
  server.on("/right",HTTP_GET,handleRight);
  server.on("/manifest.json",handleManifest);
  server.on("/images/tesla_192.png",handleTesla192);
  server.on("/images/tesla_512.png",handleTesla512);
  server.on("/inline", []() {
    server.send(200, "text/plain", "this works as well");
  });

  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTPS server started");
  
  car_mode = 0; //Set car to stationary
  steering_mode = 0; //Set car to straight
  light_mode = 0; //turn off lights
  indicator_mode = 0; //turn of indicators
  horn_mode = 0;
  
}//end set up

void loop(void) 
{
  server.handleClient();
  MDNS.update();
  car_control();
  indicator_control();
  steering_control();
  light_control();
  horn_control();
}

void car_control()
{
  switch (car_mode)
  {
    case 0://stop the car
      {
        digitalWrite(motorLeftForward,LOW);
        digitalWrite(motorLeftBackward,LOW);
        digitalWrite(motorRightForward,LOW);
        digitalWrite(motoRightBackward,LOW);
      }
    break;
      
    case 1://forward
      {
        digitalWrite(motorLeftForward,HIGH);
        digitalWrite(motorLeftBackward,LOW);
        digitalWrite(motorRightForward,HIGH);
        digitalWrite(motoRightBackward,LOW);
      }
    break;
      
    case 2://backward
      {
        digitalWrite(motorLeftForward,LOW);
        digitalWrite(motorLeftBackward,HIGH);
        digitalWrite(motorRightForward,LOW);
        digitalWrite(motoRightBackward,HIGH);
      }
    break;
  }
}

void light_control()
{
  switch(light_mode)
  {
    case 0://lights off
    {
      digitalWrite(lightPin,LOW);
    } //end case 0
    break;
    
    case 1://lights on
    {
      digitalWrite(lightPin,HIGH);
    }//end case 1
    break;
    
    case 2://flash the lights
    {
      //nothing needed here but it stops working when deleted
    }//end case 2
    break;
  }
}//end light_control

void indicator_control()
{
  static boolean entryStateLeft = false;
  static boolean entryStateRight = false;
  
  switch (indicator_mode) 
  {
    case 0://off
    {
     digitalWrite(leftIndicatorPin,LOW);
     digitalWrite(rightIndicatorPin,LOW);
     entryStateLeft = false;
     entryStateRight = false;
    }//end case 0
    break;
    
    case 1://left indicator blink
    {
      entryStateRight = false;  
      digitalWrite(rightIndicatorPin,LOW);
      unsigned long currentMillis = millis();
      if(entryStateLeft == false)
      {
        startTime = currentMillis;
        entryStateLeft = true;
      }
      
      if(currentMillis-startTime <= 5000 && entryStateLeft == true)
      {
        if (currentMillis - previousMillis >= 500) 
        {
          previousMillis = currentMillis;
          if (leftIndicatorState == LOW) 
          {
            leftIndicatorState = HIGH;
            Serial.println("L1");
          } 
          else 
          {
            leftIndicatorState = LOW;
            Serial.println("L0");
          }    
          digitalWrite(leftIndicatorPin, leftIndicatorState);
        }
      }
      
      if (currentMillis - startTime >= 5000)
      {
        indicator_mode = 0;
        entryStateLeft = false;
        Serial.println("L off");
      }
    }//end case 1
    break;
    
    case 2://right indicator blink
    {
      entryStateLeft = false;
      digitalWrite(leftIndicatorPin,LOW);
      unsigned long currentMillis = millis();
      if(entryStateRight == false)
      {
        startTime = currentMillis;
        entryStateRight = true;
      }
      
      if(currentMillis-startTime <= 5000 && entryStateRight == true)
      {
        if (currentMillis - previousMillis >= 500) 
        {
          previousMillis = currentMillis;
          if (rightIndicatorState == LOW) 
          {
            rightIndicatorState = HIGH;
            Serial.println("R1");
          } 
          else 
          {
            rightIndicatorState = LOW;
            Serial.println("R0");
          }    
          digitalWrite(rightIndicatorPin, rightIndicatorState);
        }
      }

      if(currentMillis - startTime >= 5000)
      {
        indicator_mode = 0;
        entryStateRight = false;
        Serial.println("R off");
      }
         
    }//end case 2  
    break;
    
    case 3: //flash both indicators
    {
      unsigned long currentMillis = millis();
      if (currentMillis - previousMillis >= 500) 
      {
        previousMillis = currentMillis;
        if (leftIndicatorState == LOW) 
        {
          leftIndicatorState = HIGH;
        } 
        else 
        {
          leftIndicatorState = LOW;
        }    
        digitalWrite(rightIndicatorPin, leftIndicatorState);
        digitalWrite(leftIndicatorPin, leftIndicatorState);
        digitalWrite(lightPin, leftIndicatorState);
      }     
    }//end case 3  
    break;
  }
}

void steering_control()
{
  switch (steering_mode)
  {
    case 0: //straight
    {
      
    }//end case 0
    break;
    case 1: //left
    {
      
    }//end case 1
    break;
    case 2: //right
    {
      
    }// end case 2
    break;
  }
}

void horn_control()
{
  switch (horn_mode)
  {
    case 0://horn off
    {
      noteCounter=0;
    }
    break;

    case 1://horn on
    {
      unsigned long currentNoteMillis = millis();
      unsigned long noteDuration = 500 / noteDurations[noteCounter];
      unsigned long pauseBetweenNotes = noteDuration * 1;
    
    
      if (noteCounter < numberOfNotes) 
      {
        if (outputTone && ((currentNoteMillis - previousNoteMillis) >= noteDuration)) 
        {
            previousNoteMillis = currentNoteMillis;
            noTone(hornPin);
            outputTone = false;
            noteCounter++;
        }
        else 
        {
            if ((currentNoteMillis - previousNoteMillis) >= pauseBetweenNotes) 
            {
              previousNoteMillis = currentNoteMillis;      
              if (melody[noteCounter] == 0) 
              {
                noTone(hornPin);
              } 
              else 
              {
                tone(hornPin, melody[noteCounter]);
              }
              outputTone = true;
          }
        }
      }
      if(noteCounter==numberOfNotes)
      {
        noteCounter=0;
        horn_mode=0;     
      }
    }
    break;
  }
}

void handleGo()
{
  if(car_mode == 0) //if car is stationary - you may go forward
  {
    car_mode = 1;
    Serial.println("Forward");
  }
  else if(car_mode == 1 || car_mode == 2) //if car is going backwards - stop
  {
    car_mode = 0;
    Serial.println("stop");
  }
  server.send(200, "text/html", html_index);
}

void handleStop()
{
  if(car_mode == 1 || car_mode == 2) //if car is going forwards - stop
  {
    car_mode = 0;
    Serial.println("stop");
  }
  else if(car_mode == 0) //if car is already stopped - go backwards
  {
    car_mode = 2;
    Serial.println("Backwards");
  }

  server.send(200, "text/html", html_index);
}

void handleLeftIndicator()
{
    if(indicator_mode == 0 || indicator_mode == 2) //if left indicator is not right or off - turn on left indicator
    {
      indicator_mode = 1  ;
    }
    else if(indicator_mode == 1) //if left indicator is on - turn off
    {
      indicator_mode = 0;
    }
   server.send(200, "text/html", html_index);
}

void handleRightIndicator() //if indicator is not left or off - turn on right indicator
{
  if(indicator_mode == 0 || indicator_mode == 1)
  {
    indicator_mode = 2;
  }
  else if(indicator_mode == 2) //if right indicator is on - turn off
  {
    indicator_mode = 0;
  }
  server.send(200, "text/html", html_index);
}

void handleEmergency()
{
  if(indicator_mode != 3) //if emergency is off - turn on
  {
    //light_mode = 2;
    indicator_mode = 3;
    Serial.println("Emergency On");
  }
  else if(indicator_mode == 3) //if emergency is on - turn off
  {
    //light_mode = 0;
    indicator_mode = 0;
    Serial.println("Emergency Off");
  }
  server.send(200, "text/html", html_index);
}

void handleLights()
{
  if(light_mode == 0) //if lights are off - turn them on
  {
    light_mode = 1;
    Serial.println("Lights On");
  }
  else if(light_mode == 1) //if lights are on - turn them off
  {
    light_mode = 0;
    Serial.println("Lights Off");
  }
  server.send(200, "text/html", html_index);
}
void handleLeft()
{
  if(steering_mode == 1 ||steering_mode == 2) //if steering is to the right or already left - go straight
  {
    steering_mode = 0;
    Serial.println("Straight");
  }
  else if(steering_mode == 0) //if steering is straight - go left
  {
    steering_mode = 1;
    Serial.println("Left");
  }
  server.send(200, "text/html", html_index);
}

void handleRight()
{
  if(steering_mode == 1 || steering_mode == 2)//if steering is to the left or already right- go straight
   {
    steering_mode = 0;
    Serial.println("Straight");
   }
   else if(steering_mode == 0) //if steering is straight - go right
   {
    steering_mode = 2;
    Serial.println("Right");
   }
   server.send(200, "text/html", html_index);
}

void handleHorn()
{
   
  if(horn_mode == 1)
  {
    horn_mode=0;
  }
  if(horn_mode==0)
  {
    horn_mode=1;
    Serial.println("Honk!");
  }
  server.send(200, "text/html", html_index);
}

void handleOffline()
{
  server.send(200, "text/html",offline_html);
}
void handleManifest()
{
  server.send(200,"application/js",manifest_js);
}

void handleTesla192()
{
  server.send_P(200,"image/png",tesla_192_png,sizeof(tesla_192_png));
}

void handleTesla512()
{
  server.send_P(200,"image/png",tesla_512_png,sizeof(tesla_512_png));
}

void handleServiceWorker()
{
  server.send_P(200,"application/js",serviceWorker_js);
}
void handleRoot() 
{
  server.sendHeader("Location","/index.html");
  server.send(303); 
}

void handleCSS()
{
  server.send_P(200,"text/css",styles_css);
}

void handleIndex()
{
  server.send(200,"text/html",html_index);
}

void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}
